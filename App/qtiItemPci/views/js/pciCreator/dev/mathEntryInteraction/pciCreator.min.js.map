{"version":3,"sources":["../../../qtiItemPci/views/js/pciCreator/dev/mathEntryInteraction/creator/tpl/propertiesForm!tpl","../../../qtiItemPci/views/js/pciCreator/dev/mathEntryInteraction/creator/tpl/addGapBtn!tpl","../../../qtiItemPci/views/js/pciCreator/dev/mathEntryInteraction/creator/widget/states/Question.js","../../../qtiItemPci/views/js/pciCreator/dev/mathEntryInteraction/creator/widget/states/states.js","../../../qtiItemPci/views/js/pciCreator/dev/mathEntryInteraction/creator/widget/Widget.js","../../../qtiItemPci/views/js/pciCreator/dev/mathEntryInteraction/creator/tpl/markup!tpl","../../../qtiItemPci/views/js/pciCreator/dev/mathEntryInteraction/pciCreator.js"],"names":["define","hb","template","Handlebars","depth0","helpers","partials","data","program1","program3","this","compilerInfo","merge","stack1","helper","options","buffer","helperMissing","escapeExpression","functionType","self","__","hash","call","identifier","serial","authorizeWhiteSpace","inverse","noop","fn","program","useGapExpression","unless","tool_sqrt","tool_frac","tool_exp","tool_log","tool_ln","tool_e","tool_infinity","squarebkts","tool_pi","tool_cos","tool_sin","tool_lte","tool_gte","tool_times","tool_divide","tool_plusminus","allowNewLine","enableAutoWrap","$","stateFactory","Question","formElement","simpleEditor","containerEditor","formTpl","addGapBtnTpl","toBoolean","value","defaultValue","configChangeCallBack","interaction","name","prop","triggerPci","getProperties","$addGapBtn","MathEntryInteractionStateQuestion","extend","$container","widget","$prompt","find","element","create","change","text","updateMarkup","markup","markupSelector","related","areaBroker","getAreaBroker","createAddGapBtn","addMathFieldListener","destroy","removeAddGapBtn","prototype","initForm","$gapStyleBox","$gapStyleSelector","_widget","$form","response","getResponseDeclaration","html","attr","initWidget","setChangeCallbacks","i","id","show","hide","gapStyle","newStyle","select2","width","minimumResultsForSearch","Infinity","val","trigger","onPci","latex","$toolbar","length","after","on","off","remove","factory","states","createBundle","arguments","Widget","MathEntryInteractionWidget","clone","initCreator","$interaction","registerStates","addClass","prompt","_","markupTpl","_typeIdentifier","mathEntryInteractionCreator","getTypeIdentifier","getWidget","getDefaultProperties","gapExpression","tool_lbrack","tool_rbrack","afterCreate","pci","getMarkupTemplate","getMarkupData","defaultData","PCI"],"mappings":"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","file":"pciCreator.min.js","sourcesContent":["\ndefine('tpl!mathEntryInteraction/creator/tpl/propertiesForm', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\nfunction program1(depth0,data) {\n  \n  \n  return \"checked=\\\"checked\\\"\";\n  }\n\nfunction program3(depth0,data) {\n  \n  \n  return \"style=\\\"display:none\\\"\";\n  }\n\n  buffer += \"<div class=\\\"panel\\\">\\n    <label for=\\\"\\\" class=\\\"has-icon\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Response identifier\", options) : helperMissing.call(depth0, \"__\", \"Response identifier\", options)))\n    + \"</label>\\n    <span class=\\\"icon-help tooltipstered\\\" data-tooltip=\\\"~ .tooltip-content:first\\\" data-tooltip-theme=\\\"info\\\"></span>\\n    <div class=\\\"tooltip-content\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The identifier of the choice. This identifier must not be used by any other response or item variable. An identifier is a string of characters that must start with a Letter or an underscore (\\\"_\\\") and contain only Letters, underscores, hyphens (\\\"-\\\"), period (\\\".\\\", a.k.a. full-stop), Digits, CombiningChars and Extenders.\", options) : helperMissing.call(depth0, \"__\", \"The identifier of the choice. This identifier must not be used by any other response or item variable. An identifier is a string of characters that must start with a Letter or an underscore (\\\"_\\\") and contain only Letters, underscores, hyphens (\\\"-\\\"), period (\\\".\\\", a.k.a. full-stop), Digits, CombiningChars and Extenders.\", options)))\n    + \"</div>\\n\\n    <input type=\\\"text\\\"\\n           name=\\\"identifier\\\"\\n           value=\\\"\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"\\n           placeholder=\\\"e.g. RESPONSE\\\"\\n           data-validate=\\\"$notEmpty; $qtiIdentifier; $availableIdentifier(serial=\";\n  if (helper = helpers.serial) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.serial); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\">\\n</div>\\n\\n<hr />\\n\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Options\", options) : helperMissing.call(depth0, \"__\", \"Options\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"authorizeWhiteSpace\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.authorizeWhiteSpace), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"authorize white space\", options) : helperMissing.call(depth0, \"__\", \"authorize white space\", options)))\n    + \"\\n    </label>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"useGapExpression\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.useGapExpression), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"use expression with gaps\", options) : helperMissing.call(depth0, \"__\", \"use expression with gaps\", options)))\n    + \"\\n    </label>\\n    <div class=\\\"panel mathgap-style-box\\\" \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.useGapExpression), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \">\\n        <label for=\\\"gapStyle\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Gap size\", options) : helperMissing.call(depth0, \"__\", \"Gap size\", options)))\n    + \"</label>\\n        <select name=\\\"gapStyle\\\" data-mathgap-style>\\n            <option value=\\\"math-gap-small\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Small\", options) : helperMissing.call(depth0, \"__\", \"Small\", options)))\n    + \"</option>\\n            <option value=\\\"math-gap-medium\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Medium\", options) : helperMissing.call(depth0, \"__\", \"Medium\", options)))\n    + \"</option>\\n            <option value=\\\"math-gap-large\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Large\", options) : helperMissing.call(depth0, \"__\", \"Large\", options)))\n    + \"</option>\\n        </select>\\n    </div>\\n</div>\\n\\n<hr />\\n\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Functions\", options) : helperMissing.call(depth0, \"__\", \"Functions\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_sqrt\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_sqrt), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"square root\", options) : helperMissing.call(depth0, \"__\", \"square root\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_frac\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_frac), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"fraction\", options) : helperMissing.call(depth0, \"__\", \"fraction\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_exp\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_exp), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"exponent\", options) : helperMissing.call(depth0, \"__\", \"exponent\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_log\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_log), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"log\", options) : helperMissing.call(depth0, \"__\", \"log\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_ln\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_ln), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"ln\", options) : helperMissing.call(depth0, \"__\", \"ln\", options)))\n    + \"\\n    </label>\\n</div>\\n\\n<hr />\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Symbols\", options) : helperMissing.call(depth0, \"__\", \"Symbols\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_e\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_e), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &#8494;\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_infinity\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_infinity), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &#8734;\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"squarebkts\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.squarebkts), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        [ ] square brackets\\n    </label>\\n</div>\\n\\n<hr />\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Trigonometry\", options) : helperMissing.call(depth0, \"__\", \"Trigonometry\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_pi\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_pi), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &pi;\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_cos\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_cos), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"cosinus\", options) : helperMissing.call(depth0, \"__\", \"cosinus\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_sin\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_sin), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"sinus\", options) : helperMissing.call(depth0, \"__\", \"sinus\", options)))\n    + \"\\n    </label>\\n</div>\\n\\n<hr />\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Comparison\", options) : helperMissing.call(depth0, \"__\", \"Comparison\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_lte\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_lte), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"lower than or equal\", options) : helperMissing.call(depth0, \"__\", \"lower than or equal\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_gte\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_gte), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"greater than or equal\", options) : helperMissing.call(depth0, \"__\", \"greater than or equal\", options)))\n    + \"\\n    </label>\\n</div>\\n\\n<hr />\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Operands\", options) : helperMissing.call(depth0, \"__\", \"Operands\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_times\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_times), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"times\", options) : helperMissing.call(depth0, \"__\", \"times\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_divide\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_divide), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"divide\", options) : helperMissing.call(depth0, \"__\", \"divide\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_plusminus\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_plusminus), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Plus/minus\", options) : helperMissing.call(depth0, \"__\", \"Plus/minus\", options)))\n    + \"\\n    </label>\\n</div>\\n\\n<hr />\\n\\n<h3 class=\\\"txt-error\\\"><strong><span class=\\\"icon-warning\\\"></span> \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Experimental only\", options) : helperMissing.call(depth0, \"__\", \"Experimental only\", options)))\n    + \"</strong></h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"allowNewLine\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.allowNewLine), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"allow line break\", options) : helperMissing.call(depth0, \"__\", \"allow line break\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"enableAutoWrap\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.enableAutoWrap), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"enable auto wrap\", options) : helperMissing.call(depth0, \"__\", \"enable auto wrap\", options)))\n    + \"\\n    </label>\\n</div>\\n\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!mathEntryInteraction/creator/tpl/addGapBtn', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"add-option\\\">\\n    <span class=\\\"icon-add\\\"></span> \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Add gap\", options) : helperMissing.call(depth0, \"__\", \"Add gap\", options)))\n    + \"\\n</div>\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2017 (original work) Open Assessment Technologies SA;\n */\n\ndefine('mathEntryInteraction/creator/widget/states/Question',[\n    'jquery',\n    'i18n',\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/interactions/states/Question',\n    'taoQtiItem/qtiCreator/widgets/helpers/formElement',\n    'taoQtiItem/qtiCreator/editor/simpleContentEditableElement',\n    'taoQtiItem/qtiCreator/editor/containerEditor',\n    'tpl!mathEntryInteraction/creator/tpl/propertiesForm',\n    'tpl!mathEntryInteraction/creator/tpl/addGapBtn'\n], function($, __, stateFactory, Question, formElement, simpleEditor, containerEditor, formTpl, addGapBtnTpl){\n    'use strict';\n\n    var $addGapBtn = $(addGapBtnTpl());\n\n    var MathEntryInteractionStateQuestion = stateFactory.extend(Question, function create(){\n\n        var $container = this.widget.$container,\n            $prompt = $container.find('.prompt'),\n            interaction = this.widget.element;\n\n        containerEditor.create($prompt, {\n            change : function(text){\n                interaction.data('prompt', text);\n                interaction.updateMarkup();\n            },\n            markup : interaction.markup,\n            markupSelector : '.prompt',\n            related : interaction,\n            areaBroker: this.widget.getAreaBroker()\n        });\n\n        if (toBoolean(interaction.prop('useGapExpression'), false)) {\n            this.createAddGapBtn();\n        }\n\n        this.addMathFieldListener();\n\n    }, function exit(){\n        var $container = this.widget.$container,\n            $prompt = $container.find('.prompt');\n\n        simpleEditor.destroy($container);\n        containerEditor.destroy($prompt);\n\n        this.removeAddGapBtn();\n    });\n\n    function toBoolean(value, defaultValue) {\n        if (typeof(value) === \"undefined\") {\n            return defaultValue;\n        } else {\n            return (value === true || value === \"true\");\n        }\n    }\n    /**\n     * Callback for configuration change\n     * @param {Object} interaction - the current interaction\n     * @param {String} value - new value of the changed property\n     * @param {String} name - changed property\n     */\n    function configChangeCallBack(interaction, value, name) {\n        interaction.prop(name, value);\n        interaction.triggerPci('configChange', [interaction.getProperties()]);\n    }\n\n    MathEntryInteractionStateQuestion.prototype.initForm = function initForm(){\n\n        var self = this,\n            _widget = this.widget,\n            $form = _widget.$form,\n            interaction = _widget.element,\n            response = interaction.getResponseDeclaration(),\n            $gapStyleBox,\n            $gapStyleSelector;\n\n        //render the form using the form template\n        $form.html(formTpl({\n            serial : response.serial,\n            identifier : interaction.attr('responseIdentifier'),\n\n            authorizeWhiteSpace: toBoolean(interaction.prop('authorizeWhiteSpace'), false),\n            useGapExpression: toBoolean(interaction.prop('useGapExpression'), false),\n\n            tool_frac:      toBoolean(interaction.prop('tool_frac'),    true),\n            tool_sqrt:      toBoolean(interaction.prop('tool_sqrt'),    true),\n            tool_exp:       toBoolean(interaction.prop('tool_exp'),     true),\n            tool_log:       toBoolean(interaction.prop('tool_log'),     true),\n            tool_ln:        toBoolean(interaction.prop('tool_ln'),      true),\n            tool_e:         toBoolean(interaction.prop('tool_e'),       true),\n            tool_infinity:  toBoolean(interaction.prop('tool_infinity'),true),\n            squarebkts:     toBoolean(interaction.prop('tool_rbrack'),  true) && toBoolean(interaction.prop('tool_lbrack'), true),\n            tool_pi:        toBoolean(interaction.prop('tool_pi'),      true),\n            tool_cos:       toBoolean(interaction.prop('tool_cos'),     true),\n            tool_sin:       toBoolean(interaction.prop('tool_sin'),     true),\n            tool_lte:       toBoolean(interaction.prop('tool_lte'),     true),\n            tool_gte:       toBoolean(interaction.prop('tool_gte'),     true),\n            tool_times:     toBoolean(interaction.prop('tool_times'),   true),\n            tool_divide:    toBoolean(interaction.prop('tool_divide'),  true),\n            tool_plusminus: toBoolean(interaction.prop('tool_plusminus'),true),\n\n            allowNewLine: toBoolean(interaction.prop('allowNewLine'), false),\n            enableAutoWrap: toBoolean(interaction.prop('enableAutoWrap'), false)\n        }));\n\n        //init form javascript\n        formElement.initWidget($form);\n\n        //init data change callbacks\n        formElement.setChangeCallbacks($form, interaction, {\n            identifier: function(i, value){\n                response.id(value);\n                interaction.attr('responseIdentifier', value);\n            },\n            useGapExpression: function gapChangeCallback(i, value) {\n                if (toBoolean(value, false)) {\n                    self.createAddGapBtn();\n                    $gapStyleBox.show();\n                    response.attr('cardinality', 'multiple');\n                } else {\n                    i.prop('gapExpression', '');\n                    self.removeAddGapBtn();\n                    $gapStyleBox.hide();\n                    response.attr('cardinality', 'single');\n                }\n                configChangeCallBack(i, value, 'useGapExpression');\n            },\n            gapStyle: function gapStyleChangeCallback(i, newStyle) {\n\n                i.prop('gapStyle', newStyle);\n\n                configChangeCallBack(i, newStyle, 'gapStyle');\n            },\n            authorizeWhiteSpace: configChangeCallBack,\n\n            tool_frac:      configChangeCallBack,\n            tool_sqrt:      configChangeCallBack,\n            tool_exp:       configChangeCallBack,\n            tool_log:       configChangeCallBack,\n            tool_ln:        configChangeCallBack,\n            tool_e:         configChangeCallBack,\n            tool_infinity:  configChangeCallBack,\n            tool_pi:        configChangeCallBack,\n            tool_cos:       configChangeCallBack,\n            tool_sin:       configChangeCallBack,\n            tool_lte:       configChangeCallBack,\n            tool_gte:       configChangeCallBack,\n            tool_times:     configChangeCallBack,\n            tool_divide:    configChangeCallBack,\n            tool_plusminus: configChangeCallBack,\n\n            squarebkts: function squarebktsChangeCallBack(i, value) {\n                i.prop('tool_lbrack', value);\n                i.prop('tool_rbrack', value);\n                i.triggerPci('configChange', [i.getProperties()]);\n            },\n\n            allowNewLine: configChangeCallBack,\n            enableAutoWrap: configChangeCallBack\n        });\n\n\n        $gapStyleBox = $form.find('.mathgap-style-box');\n        $gapStyleSelector = $gapStyleBox.find('[data-mathgap-style]');\n\n        $gapStyleSelector.select2({\n            width: '100%',\n            minimumResultsForSearch: Infinity\n        })\n        .val(interaction.prop('gapStyle'))\n        .trigger('change');\n    };\n\n    /**\n     * Change callback for editable math field\n     */\n\n    MathEntryInteractionStateQuestion.prototype.addMathFieldListener = function addMathFieldListener() {\n        var _widget = this.widget,\n            interaction = _widget.element;\n\n        interaction.onPci('responseChange', function(latex) {\n            if (toBoolean(interaction.prop('useGapExpression'), false)) {\n                interaction.prop('gapExpression', latex);\n            } else {\n                interaction.prop('gapExpression', '');\n            }\n        });\n    };\n\n    /**\n     * Display the \"Add Gap\" button\n     */\n    MathEntryInteractionStateQuestion.prototype.createAddGapBtn = function createAddGapBtn() {\n        var _widget = this.widget,\n            $container = _widget.$container,\n            $toolbar = $container.find('.toolbar'),\n            interaction =_widget.element;\n\n        if ($toolbar.length) {\n            $toolbar.after($addGapBtn);\n            $addGapBtn.on('click', function() {\n                interaction.triggerPci('addGap');\n            });\n        }\n    };\n\n    /**\n     * Remove the \"Add Gap\" button from the DOM\n     */\n    MathEntryInteractionStateQuestion.prototype.removeAddGapBtn = function removeAddGapBtn() {\n        $addGapBtn.off('click');\n        $addGapBtn.remove();\n    };\n\n    return MathEntryInteractionStateQuestion;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\n\ndefine('mathEntryInteraction/creator/widget/states/states',[\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/interactions/customInteraction/states/states',\n    'mathEntryInteraction/creator/widget/states/Question'\n], function(factory, states){\n    'use strict';\n\n    return factory.createBundle(states, arguments, ['answer', 'correct', 'map']);\n});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\n\ndefine('mathEntryInteraction/creator/widget/Widget',[\n    'taoQtiItem/qtiCreator/widgets/interactions/customInteraction/Widget',\n    'mathEntryInteraction/creator/widget/states/states'\n], function(Widget, states){\n    'use strict';\n\n    var MathEntryInteractionWidget = Widget.clone();\n\n    MathEntryInteractionWidget.initCreator = function initCreator() {\n        var $interaction;\n\n        this.registerStates(states);\n\n        Widget.initCreator.call(this);\n\n        $interaction = this.$container.find('.mathEntryInteraction');\n        if ($interaction.length) {\n            $interaction.addClass('tao-qti-creator-context');\n        }\n    };\n\n    return MathEntryInteractionWidget;\n});\n","\ndefine('tpl!mathEntryInteraction/creator/tpl/markup', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\";\n\n\n  buffer += \"<div class=\\\"mathEntryInteraction\\\">\\n    <div class=\\\"prompt\\\">\";\n  if (helper = helpers.prompt) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.prompt); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\n    <div class=\\\"math-entry\\\">\\n        <div class=\\\"toolbar\\\"></div>\\n        <div>\\n            <span class=\\\"math-entry-input\\\"></span>\\n        </div>\\n    </div>\\n</div>\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n *\n * @author Christophe Noël <christophe@taotesting.com>\n *\n */\n\ndefine('mathEntryInteraction/pciCreator',[\n    'lodash',\n    'mathEntryInteraction/creator/widget/Widget',\n    'tpl!mathEntryInteraction/creator/tpl/markup'\n], function(_, Widget, markupTpl){\n    'use strict';\n\n    var _typeIdentifier = 'mathEntryInteraction';\n\n    var mathEntryInteractionCreator = {\n        /**\n         * (required) Get the typeIdentifier of the custom interaction\n         *\n         * @returns {String}\n         */\n        getTypeIdentifier : function getTypeIdentifier(){\n            return _typeIdentifier;\n        },\n        /**\n         * (required) Get the widget prototype\n         * Used in the renderer\n         *\n         * @returns {Object} Widget\n         */\n        getWidget : function getWidget(){\n            return Widget;\n        },\n        /**\n         * (optional) Get the default properties values of the pci.\n         * Used on new pci instance creation\n         *\n         * @returns {Object}\n         */\n        getDefaultProperties : function getDefaultProperties(){\n            return {\n                authorizeWhiteSpace: 'false',\n                useGapExpression: 'false',\n                gapExpression: '',\n                gapStyle: '',\n\n                tool_frac:      'true',\n                tool_sqrt:      'true',\n                tool_exp:       'true',\n                tool_log:       'true',\n                tool_ln:        'true',\n                tool_e:         'true',\n                tool_infinity:  'true',\n                tool_lbrack:    'true',\n                tool_rbrack:    'true',\n                tool_pi:        'true',\n                tool_cos:       'true',\n                tool_sin:       'true',\n                tool_lte:       'true',\n                tool_gte:       'true',\n                tool_times:     'true',\n                tool_divide:    'true',\n                tool_plusminus: 'true',\n\n                allowNewLine:   'false',\n                enableAutoWrap:  'false'\n            };\n        },\n        /**\n         * (optional) Callback to execute on the\n         * Used on new pci instance creation\n         *\n         * @returns {Object}\n         */\n        afterCreate : function afterCreate(pci){\n            //do some stuff\n        },\n        /**\n         * (required) Gives the qti pci xml template\n         *\n         * @returns {function} handlebar template\n         */\n        getMarkupTemplate : function getMarkupTemplate(){\n            return markupTpl;\n        },\n        /**\n         * (optional) Allows passing additional data to xml template\n         *\n         * @returns {function} handlebar template\n         */\n        getMarkupData : function getMarkupData(pci, defaultData){\n            defaultData.prompt = pci.data('prompt');\n            return defaultData;\n        }\n    };\n\n    //since we assume we are in a tao context, there is no use to expose the a global object for lib registration\n    //all libs should be declared here\n    return mathEntryInteractionCreator;\n});\n"]}